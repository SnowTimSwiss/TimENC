name: Build & Attach Binaries to Release

# Fordert nur die Rechte an, die wirklich benötigt werden
permissions:
  contents: write # Erforderlich, um Assets zu einem Release hochzuladen

on:
  release:
    types: [published] # Wird nur ausgeführt, wenn du ein Release veröffentlichst

# Verhindert, dass Workflows sich überschneiden, falls ein Release schnell
# bearbeitet und neu veröffentlicht wird.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Ein einziger Job, der dank der Matrix auf allen 3 Systemen parallel läuft
  build-and-upload:
    
    strategy:
      fail-fast: false # Stellt sicher, dass auch bei Fehlschlag eines OS die anderen weiterlaufen
      matrix:
        os: [windows-latest, ubuntu-latest, macos-14] # macos-14 für Apple Silicon (oder macos-latest)

    runs-on: ${{ matrix.os }} # Nutzt das Betriebssystem aus der Matrix

    steps:
      # --- 1. Allgemeine Setup-Schritte (laufen auf allen Systemen) ---

      - name: Code auschecken
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Nötig, um den Release-Tag-Namen korrekt zu lesen

      - name: Python 3.12 einrichten
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Python-Abhängigkeiten installieren
        run: |
          python -m pip install --upgrade pip
          pip install PySide6 cryptography argon2-cffi pyinstaller

      # --- 2. Windows Build & Upload (läuft nur auf Windows) ---

      - name: (Windows) Build .exe
        if: matrix.os == 'windows-latest'
        shell: pwsh # KORREKTUR: Explizit PowerShell verwenden
        run: |
          $ICON_OPTION = ""
          if (Test-Path "images/TimENC-icon.ico") {
            $ICON_OPTION = "--icon=images/TimENC-icon.ico"
          } else {
            Write-Host "No ICO icon found, building without icon"
          }
          # PyInstaller wird mit PowerShell-Variablen aufgerufen
          pyinstaller --onefile --windowed --name TimENC $ICON_OPTION timenc.py

      - name: (Windows) Upload .exe
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/TimENC.exe
          asset_name: TimENC-Windows.exe
          asset_content_type: application/octet-stream

      # --- 3. Linux Build & Upload (läuft nur auf Linux) ---

      - name: (Linux) Build Executable
        if: matrix.os == 'ubuntu-latest'
        run: |
          ICON_OPTION=""
          if [ -f images/TimENC-icon.png ]; then
            ICON_OPTION="--icon=images/TimENC-icon.png"
          else
            echo "No PNG icon found, building without icon"
          fi
          pyinstaller --onefile --windowed --name TimENC $ICON_OPTION timenc.py

      - name: (Linux) Create .deb Paket
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          sudo gem install fpm
          
          # Paketstruktur erstellen
          mkdir -p package/usr/bin package/usr/share/applications package/usr/share/icons/hicolor/256x256/apps
          cp dist/TimENC package/usr/bin/
          
          if [ -f images/TimENC-icon.png ]; then
            cp images/TimENC-icon.png package/usr/share/icons/hicolor/256x256/apps/TimENC.png
          fi
          
          # .desktop-Datei erstellen
          cat > package/usr/share/applications/TimENC.desktop << EOF
          [Desktop Entry]
          Name=TimENC
          Exec=TimENC
          $( [ -f images/TimENC-icon.png ] && echo "Icon=TimENC" )
          Type=Application
          Categories=Utility;
          EOF
          
          # fpm ausführen (erstellt .deb im Root-Verzeichnis)
          # HINWEIS: fpm erstellt den Dateinamen mit Underscores, z.B. timenc_1.0.0_amd64.deb
          fpm -s dir -t deb -n timenc -v ${{ github.event.release.tag_name }} -C package --description "Modern encryption tool" .

      - name: (Linux) Create AppImage
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool.AppImage
          chmod +x appimagetool.AppImage
          
          mkdir -p TimENC.AppDir
          cp dist/TimENC TimENC.AppDir/
          
          if [ -f images/TimENC-icon.png ]; then
            cp images/TimENC-icon.png TimENC.AppDir/TimENC.png
          fi
          
          # .desktop-Datei für AppImage
          cat > TimENC.AppDir/TimENC.desktop << 'EOF'
          [Desktop Entry]
          Name=TimENC
          Exec=TimENC
          EOF
          if [ -f images/TimENC-icon.png ]; then
            echo "Icon=TimENC" >> TimENC.AppDir/TimENC.desktop
          fi
          cat >> TimENC.AppDir/TimENC.desktop << 'EOF'
          Type=Application
          Categories=Utility;
          EOF
          
          # AppRun-Datei
          cat > TimENC.AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          exec "${HERE}/TimENC" "$@"
          EOF
          chmod +x TimENC.AppDir/AppRun
          
          # AppImage erstellen (erstellt Datei im Root-Verzeichnis)
          ./appimagetool.AppImage --appimage-extract-and-run TimENC.AppDir TimENC-${{ github.event.release.tag_name }}-x86_64.AppImage

      # KORREKTUR: Drei separate Schritte für den Linux-Upload

      - name: (Linux) Upload Executable
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/TimENC
          asset_name: TimENC-Linux-Executable
          asset_content_type: application/octet-stream

      - name: (Linux) Upload .deb
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: timenc_${{ github.event.release.tag_name }}_amd64.deb # KORRIGIERTER PFAD (Root-Verzeichnis, fpm-Namenskonvention)
          asset_name: TimENC-${{ github.event.release.tag_name }}-Ubuntu-Debian.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: (Linux) Upload AppImage
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: TimENC-${{ github.event.release.tag_name }}-x86_64.AppImage # KORRIGIERTER PFAD (Root-Verzeichnis)
          asset_name: TimENC-${{ github.event.release.tag_name }}-AppImage.AppImage
          asset_content_type: application/x-iso9660-appimage

      # --- 4. macOS Build & Upload (läuft nur auf macOS) ---

      - name: (macOS) Build .app
        if: matrix.os == 'macos-14'
        run: |
          ICON_OPTION=""
          if [ -f images/TimENC-icon.icns ]; then
            ICON_OPTION="--icon=images/TimENC-icon.icns"
          else
            echo "No ICNS icon found, building without icon"
          fi
          pyinstaller --onefile --windowed --name TimENC $ICON_OPTION timenc.py

      - name: (macOS) Create DMG
        if: matrix.os == 'macos-14'
        run: |
          brew install create-dmg
          # KORREKTUR: Pfade für --icon und die Quell-App
          create-dmg \
            --volname "TimENC ${{ github.event.release.tag_name }}" \
            --window-size 600 300 \
            --icon "dist/TimENC.app" 180 120 \
            --app-drop-link 420 120 \
            "TimENC-${{ github.event.release.tag_name }}.dmg" \
            "dist/TimENC.app" # KORRIGIERTER Quellpfad

      - name: (macOS) Upload .dmg
        if: matrix.os == 'macos-14'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: TimENC-${{ github.event.release.tag_name }}.dmg
          asset_name: TimENC-${{ github.event.release.tag_name }}-macOS.dmg
          asset_content_type: application/x-apple-diskimage
