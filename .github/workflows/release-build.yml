name: Build & Attach Binaries to Release
permissions:
  contents: write
  packages: write
  issues: write
on:
  release:
    types: [published]
jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PySide6 cryptography argon2-cffi pyinstaller
      - name: Build .exe
        run: |
          ICON_OPTION=""
          if [ -f images/TimENC-icon.ico ]; then
            ICON_OPTION="--icon=images/TimENC-icon.ico"
          else
            echo "No ICO icon found, building without icon"
          fi
          pyinstaller --onefile --windowed --name TimENC $ICON_OPTION timenc.py
      - name: Upload .exe to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/TimENC.exe
          asset_name: TimENC-Windows.exe
          asset_content_type: application/octet-stream

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PySide6 cryptography argon2-cffi pyinstaller
      - name: Build executable
        run: |
          ICON_OPTION=""
          if [ -f images/TimENC-icon.png ]; then
            ICON_OPTION="--icon=images/TimENC-icon.png"
          else
            echo "No PNG icon found, building without icon"
          fi
          pyinstaller --onefile --windowed --name TimENC $ICON_OPTION timenc.py
      - name: Create .deb
        run: |
          sudo apt update
          sudo apt install -y ruby ruby-dev build-essential rpm
          sudo gem install fpm
          mkdir -p package/usr/bin package/usr/share/applications package/usr/share/icons/hicolor/256x256/apps
          cp dist/TimENC package/usr/bin/
          if [ -f images/TimENC-icon.png ]; then
            cp images/TimENC-icon.png package/usr/share/icons/hicolor/256x256/apps/TimENC.png
          else
            echo "No PNG icon found, skipping for .deb"
          fi
          cat > package/usr/share/applications/TimENC.desktop << EOF
          [Desktop Entry]
          Name=TimENC
          Exec=TimENC
          $( [ -f images/TimENC-icon.png ] && echo "Icon=TimENC" )
          Type=Application
          Categories=Utility;
          EOF
          fpm -s dir -t deb -n timenc -v ${{ github.event.release.tag_name }} -C package --description "Modern encryption tool" .
      - name: Create AppImage (without FUSE)
        run: |
          # Download appimagetool
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool.AppImage
          chmod +x appimagetool.AppImage

          # Create AppDir
          mkdir -p TimENC.AppDir
          cp dist/TimENC TimENC.AppDir/
          if [ -f images/TimENC-icon.png ]; then
            cp images/TimENC-icon.png TimENC.AppDir/TimENC.png
          else
            echo "No PNG icon found, skipping for AppImage"
          fi

          # Desktop file (conditional Icon line)
          cat > TimENC.AppDir/TimENC.desktop << 'EOF'
          [Desktop Entry]
          Name=TimENC
          Exec=TimENC
          EOF
          if [ -f images/TimENC-icon.png ]; then
            echo "Icon=TimENC" >> TimENC.AppDir/TimENC.desktop
          fi
          cat >> TimENC.AppDir/TimENC.desktop << 'EOF'
          Type=Application
          Categories=Utility;
          EOF

          # AppRun
          cat > TimENC.AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          exec "${HERE}/TimENC" "$@"
          EOF
          chmod +x TimENC.AppDir/AppRun

          # Build AppImage with extract-and-run (no FUSE needed)
          ./appimagetool.AppImage --appimage-extract-and-run TimENC.AppDir TimENC-${{ github.event.release.tag_name }}-x86_64.AppImage
      - name: Upload Linux assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: |
            dist/TimENC
            timenc_${{ github.event.release.tag_name }}_amd64.deb
            TimENC-${{ github.event.release.tag_name }}-x86_64.AppImage
          asset_name: |
            TimENC-Linux-Executable
            TimENC-${{ github.event.release.tag_name }}-Ubuntu-Debian.deb
            TimENC-${{ github.event.release.tag_name }}-AppImage.AppImage
          asset_content_type: application/octet-stream

  build-macos:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PySide6 cryptography argon2-cffi pyinstaller
      - name: Build .app
        run: |
          ICON_OPTION=""
          if [ -f images/TimENC-icon.icns ]; then
            ICON_OPTION="--icon=images/TimENC-icon.icns"
          else
            echo "No ICNS icon found, building without icon"
          fi
          pyinstaller --onefile --windowed --name TimENC $ICON_OPTION timenc.py
      - name: Create DMG
        run: |
          brew install create-dmg
          create-dmg \
            --volname "TimENC ${{ github.event.release.tag_name }}" \
            --window-size 600 300 \
            --icon "TimENC.app" 180 120 \
            --app-drop-link 420 120 \
            "TimENC-${{ github.event.release.tag_name }}.dmg" \
            "dist/"
      - name: Upload .dmg to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: TimENC-${{ github.event.release.tag_name }}.dmg
          asset_name: TimENC-${{ github.event.release.tag_name }}-macOS.dmg
          asset_content_type: application/octet-stream
